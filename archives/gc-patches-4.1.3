===========
https://bitbucket.org/alfredchen/linux-gc/commits/branch/linux-4.1.y-gc
=====================
01 - linux-gc-ecf13b09c3f2d1de87a0e82284d98f99dff01587.patch
02 - linux-gc-ac2b11827a027adb77a258e94fdc929894f30dd9.patch
03 - linux-gc-319a6a27f2262442747802bfc636f40f35867921.patch
04 - linux-gc-cd356bf85dbdba7ba7066e20ebc2adc51d38155e.patch
05 - linux-gc-322eefc62ede58eb882da265fa5345d98f7b79e9.patch
06 - linux-gc-0786cc78f54e2e5ff2fe9dc1f75ad3fa2b2f07cd.patch
07 - linux-gc-c89a2dc1245a2ddd17fadb643ce4c7654bcbb054.patch
08 - linux-gc-5f98612bf1800009e7b761004326e358a8ca821a.patch
09 - linux-gc-dc67f12ce493500896050fcec58fad14becb3642.patch
10 - linux-gc-2c92539b17b05d126b63e7f124beb212b160d233.patch
11 - linux-gc-469746f77d65c44f50c114ba7a0ae03fcae42ff9.patch
12 - linux-gc-c296a6d57d061103d3248a43c3ee10c1e38c990c.patch
13 - linux-gc-eeaebd6365753fb734dbd6e9c89fc9de268283f8.patch
14 - linux-gc-21b266dd443fc60ee32896a71f6ddc34ac058790.patch
15 - linux-gc-a5c8a76c2fc438e3bad7d1b4df788b50e14c9975.patch
16 - linux-gc-23c211e5b19469f0cd1d4b08720d95d2cfc488a3.patch
17 - linux-gc-6473d1d928eb8172a18e29cbf4554288e93ca6df.patch
18 - linux-gc-ec958e8dd48c002329d7c948f3b36234e74d9c7f.patch
19 - linux-gc-5a83c016fbfc83e025b42c9c82b7fb4edcb2e1ce.patch
20 - linux-gc-84bfa6d6e68d095b99670ade94807beac01f9289.patch
21 - linux-gc-4bb9c612bcb87d875f7f1b93ae7718e4ce7bc644.patch
22 - linux-gc-dc1ced7419bc8848df0c73f22371c999879baa29.patch
23 - linux-gc-2eeb21df069b33abaa5397323f51503e06fbce30.patch
24 - linux-gc-f06402136eecb6eb10003282753dd8987e230905.patch
25 - linux-gc-efc743bac1a1136b2383b135d1d74b3242e42ab2.patch
26 - linux-gc-911bac7b2fcd8a7ec9d1b82109e77d89cb025c24.patch
27 - linux-gc-66a415985f3a72f89dc13f8a8b5c3bcef400983f.patch



==============================================

01 - Keyboard backlight for ChromeOS and Pixel.
linux-gc-ecf13b09c3f2d1de87a0e82284d98f99dff01587.patch
renamed to:
keyboard_backlight_for_ChromeOS_and_Pixel.patch

LED support for Chrome OS keyboards (LEDS_CHROMEOS_KEYBOARD) [N/m/y/?] (NEW)
LED support for Chrome OS keyboards (LEDS_PIXEL_KEYBOARD) [N/m/?] (NEW) 

# Keyboard backlight for ChromeOS and Pixel
CONFIG_LEDS_CHROMEOS_KEYBOARD=m
# LED support for Chrome OS keyboards
CONFIG_LEDS_PIXEL_KEYBOARD=m
==============================================

02 - [PATCH 1/1] Remapping PS/2 keyboards for Chromebook Pixel
linux-gc-ac2b11827a027adb77a258e94fdc929894f30dd9.patch
renamed to:
remapping_PS/2_keyboards_for_Chromebook_Pixel.patch

This establishes a somewhat generic way to do this and implements a
specific solution for the Pixel where the right Ctrl key is redefined to
be an Fn key.

Press/release events for the fake Fn key are no longer reported up, but
if the fake Fn key is pressed, then other keys are potentially
translated.

Implemented in this patch are the following mappings:
Search Key(Win) -> CapsLock
Right Alt       -> Win
Right Ctrl      -> Fn

with Fn held
BS    -> Delete
Up    -> PgUp
Down  -> PgDn
Left  -> Home
Right -> End

Original writen by Dirk Hohndel <dirk@hohndel.org>
Updated by Alfred Chen <cchalpha@gmail.com>


==============================================

03 - phc-intel 0.3.2 patch for linux 3.16.
linux-gc-319a6a27f2262442747802bfc636f40f35867921.patch
rename to:
phc-intel_0.3.2.patch

==============================================

04 - Use prefered raid6 gen function.
linux-gc-cd356bf85dbdba7ba7066e20ebc2adc51d38155e.patch
renamed to:
Use_prefered_raid6_gen_function.patch

Use prefered raid6 gen function. (RAID6_USE_PREFER_GEN) [N/y/?] (NEW)

==============================================

05 - [PATCH v5] x86: Enable fast strings on Intel if BIOS hasn't already
linux-gc-322eefc62ede58eb882da265fa5345d98f7b79e9.patch
renamed to:
x86_Enable_fast_strings_on_Intel_if_BIOS_hasn't_already.patch
 
==============================================

06 - gcc optimizations
linux-gc-0786cc78f54e2e5ff2fe9dc1f75ad3fa2b2f07cd.patch
> gcc-optimizations.patch

The original patch was written by jeroen@linuxforge.net

Benchmarks by graysky

Three different machines running a generic x86-64 kernel and an
otherwise identical kernel running with the optimized gcc options were
tested using a make based endpoint.

Conclusion:
There are small but real speed increases using a make endpoint to
running with this patch.

Details:
1) Three test machines: Intel Xeon X3360, Intel i7-2620M, Intel Core
i7-3660K.
2) All ran the make benchmark (linked below) 35 times while booted into
a 'generic' kernel. Then all ran the same make benchmark 35 times after
booting into an optimized kernel. Below are the optimizations chosen for
each machine.
2a) X3360 = core2
2b) i7-2620M = corei7-avx
2c) i7-3660K = core-avx-i
3) Analyzed resulting distributions for statistical significance via
ANOVA plots that clearly show statistically significant albeit small
differences.

Links to ANOVA plots:
http://s19.postimage.org/68urcofzn/corei7_avx.png
http://s19.postimage.org/ozwomuak3/core_avx_i.png
http://s19.postimage.org/d0l6fj4z7/core2.png

Discussion:
1) All the assumptions for ANOVA are met:
*Data are normally distributed as show in the normal quantile plots.
*The population variances are fairly equal (Levene and Barlett tests).

2) The ANOVA plots clearly show significance.
*Pair-wise analysis by Tukey-Kramer shows significance at the 0.05 level
for all CPUs compared.
Below are the differences in median values:

core2       +87.5 ms
corei7-avx  +79.7 ms
core-avx-i  +257.2 ms

References:
Bash script that controls the benchmark:
https://github.com/graysky2/bin/blob/master/bench
Log file generated by script:
http://repo-ck.com/bench/compile_time_optimization.txt.gz

Conflicts:
	arch/x86/Kconfig.cpu

==============================================

07 - Add XOR_PREFER_TEMPLATE to xor[v2].
Use XOR_PREFER_TEMPLATE can avoid xor template checking at bootup.
linux-gc-c89a2dc1245a2ddd17fadb643ce4c7654bcbb054.patch
renamed to:
add-XOR_PREFER_TEMPLATE-to-xor[v2].patch

==============================================

08 - bfs: -gc BFS enchancement patch set version.
linux-gc-5f98612bf1800009e7b761004326e358a8ca821a.patch
> bfs-19-gc-BFS-enchancement-patch-set-version.patch

Add -gc patch set version to dmesg to identify patch set info at
runtime.

==============================================

09 - bfs: Remove unused scheduler api.
linux-gc-dc67f12ce493500896050fcec58fad14becb3642.patch
> bfs-18-Remove-unused-scheduler-api.patch
==============================================

10 - bfs: cpu hotplug affinity enhancement, v1.1
linux-gc-2c92539b17b05d126b63e7f124beb212b160d233.patch
> bfs-17-cpu-hotplug-affinity-enhancement_v1.1.patch

This enhancement keep tasks's original cpu affinity intend during cpu
hotplug events. Detail can be checked from
http://cchalpha.blogspot.com/2015/05/about-hotplug-affinity-enhancement.html

v1.1:
Fix compile error when CONFIG_HOTPLUG_CPU is not enabled.

==============================================

11 - bfs: Make grq cacheline aligned.
linux-gc-469746f77d65c44f50c114ba7a0ae03fcae42ff9.patch
> bfs-16-Make-grq-cacheline-aligned.patch

==============================================

12 - bfs: Refactor set_rq_task and inline reset_rq_task.
linux-gc-c296a6d57d061103d3248a43c3ee10c1e38c990c.patch
> bfs-15-Refactor-set_rq_task-and-inline-reset_rq_task.patch

==============================================

13 - bfs: Refactor rq dither calculation in schedule().
linux-gc-eeaebd6365753fb734dbd6e9c89fc9de268283f8.patch
> bfs-14-Refactor-rq-dither-calculation-in-schedule().patch

==============================================

14 - bfs: Refactor idle!=prev and next task block in schedule().
linux-gc-21b266dd443fc60ee32896a71f6ddc34ac058790.patch
> bfs-13-Refactor-idle!=prev-and-next-task-block-in-schedule().patch

Just refactory the code and doesn't change the logic. Reduce a dupicated
condition sentence and some not operations.

==============================================

15 - bfs: Full cpumask based and LLC sensitive cpu selection, V2
linux-gc-a5c8a76c2fc438e3bad7d1b4df788b50e14c9975.patch
> bfs-12-Full-cpumask-based-and-LLC-sensitive-cpu-selection_V2.patch

Rewrite the cpu selection logic using full cpumask based calculation.
The benefit of cpumask based calculation is that the cost is not scaled
with cpu numbers when it is among a certain range(64 cpus for 64bits
system and 32 cpus for 32bit system). To implement full cpumask
calculation, non_scaled_cpumask is introduced in grq structure. The
plug-in code in cpufreq and intel_pstate drivers also be modified to
avoid multi-trigger when scaling down from max cpu freq.

The cost to transfer tasks among cpu which shares same LLC(Last Level
Cache) should be consider free. The best_mask_cpu() cpu selection logic
now follows below orders:
* Non scaled same cpu as task originally runs on
* Non scaled SMT of the cup
* Non scaled cores/threads shares last level cache
* Scaled same cpu as task originally runs on
* Scaled SMT of the cup
* Scaled cores/threads shares last level cache
* Non scaled cores within the same physical cpu
* Non scaled cpus/Cores within the local NODE
* Scaled cores within the same physical cpu
* Scaled cpus/Cores within the local NODE
* All cpus avariable
V2 Fix issue when SMP config enabled, but non of SMT or MC config is
enabled.

==============================================

16 - bfs: [3/3] priodl to speed up try_preempt(), v2.3
linux-gc-23c211e5b19469f0cd1d4b08720d95d2cfc488a3.patch

Introduced task priodl, which first 8 bits are the task prio and the
last 56 bits are the task deadline(higher 56 bits) to speed up
try_preempt() calculation.
v2
rq's priodl store in grq.rq_priodls array, for 32bits system,
grq.priodl_lock needs to be held for r/w.
v2.1
fix try_preempt should has void return type.
v2.2
priodl fix for 32bit system, v2.2
fix issue that priodl is not set for idle task.
v2.3
fix compile error with non_SMP config.

bfs-11-[3/3]-priodl-to-speed-up-try_preempt()_v2.3.patch

==============================================

17 - bfs: [2/3] Refactor needs_other_cpu().
linux-gc-6473d1d928eb8172a18e29cbf4554288e93ca6df.patch

bfs-10-[2/3]-Refactor-needs_other_cpu().patch

==============================================

18 - bfs: [1/3] Refactor online_cpus() checking in try_preempt().
linux-gc-ec958e8dd48c002329d7c948f3b36234e74d9c7f.patch

bfs-09-[1/3]-Refactor-online_cpus()-checking-in-try_preempt().patch


==============================================

19 - bfs: [Sync] try_to_wake_up* functions.
linux-gc-5a83c016fbfc83e025b42c9c82b7fb4edcb2e1ce.patch

bfs-08-[Sync]-try_to_wake_up*-functions.patch

==============================================

============================================================================================***


bfs: [Fix] Fix wrong rcu_dereference_check() usage.
https://bitbucket.org/alfredchen/linux-gc/commits/b6e4eafcbc1bf5754d5703f80b76d22d53d6b3e6?at=linux-4.1.y-gc

bfs: [Fix] Fix undeclared sched_domains_mutex.
https://bitbucket.org/alfredchen/linux-gc/commits/96546670bc617a0d84b78664e9d3baf0f0c00de3?at=linux-4.1.y-gc


============================================================================================***

==============================================

20 - bfs: [Fix] Clean up wake_entry in task_struct 
linux-gc-84bfa6d6e68d095b99670ade94807beac01f9289.patch

bfs-07-[Fix]-Clean-up-wake_entry-in-task_struct.patch

==============================================

21 - bfs: [Sync] Make cpu_rq(cpu) a macro.
linux-gc-4bb9c612bcb87d875f7f1b93ae7718e4ce7bc644.patch

bfs-06-[Sync]-Make-cpu_rq(cpu)-a-macro.patch

==============================================

22 - [Sync] __setscheduler()
linux-gc-dc1ced7419bc8848df0c73f22371c999879baa29.patch

bfs-05-[Sync]_setscheduler().patch

==============================================

23 - bfs: [Sync] sched_setscheduler() logic, v2
linux-gc-2eeb21df069b33abaa5397323f51503e06fbce30.patch

New parameter called sched_attr is introduced during 3.14 in
sched_setscheduler() and related functions.

bfs-04-[Sync]-sched_setscheduler()-logic_v2.patch

==============================================

24 - bfs: [Sync] sched_getaffinity().
linux-gc-f06402136eecb6eb10003282753dd8987e230905.patch

bfs-03-[Sync]-sched_getaffinity().patch

==============================================

25 - bfs: [Sync] resched_curr()
linux-gc-efc743bac1a1136b2383b135d1d74b3242e42ab2.patch

Complete replace old resched_task() with new resched_curr() as mainline
3.17 does.

renamed to:
bfs-02-[Sync]-resched_curr().patch

==============================================

26 - bfs: [Sync] __schedule() and io_schedule_timeout()
linux-gc-911bac7b2fcd8a7ec9d1b82109e77d89cb025c24.patch

v2
Sync with v4.1

renamed to:
bfs-01-[Sync]_schedule()-and-io_schedule_timeout().patch

==============================================

27 - The Brain Fuck Scheduler v0.462 by Con Kolivas.
linux-gc-66a415985f3a72f89dc13f8a8b5c3bcef400983f.patch

==============================================

27 - Kernel 4.1

==============================================
